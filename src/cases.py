#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" Neighbors cases and test cases for the gathering of robots problem
"""

__author__ = 'Eloi Perdereau'
__date__ = '13-03-2014'

def fmt(s):
    """ Format from string of bits to integer """
    return int(s.strip().replace(' ',''), 2)

# put here all movement cases depending on neighbors
# don't bother with symetric cases, they will be generated by rotations below
nosym_neighbors_cases = {

    # one neighbor
    fmt('1 0 0' \
        '0   0' \
        '0 0 0') : (-1,-1),
    fmt('0 1 0' \
        '0   0' \
        '0 0 0') : (-1, 0),

    # two neighbors : themselves neighbors
    fmt('1 1 0' \
        '0   0' \
        '0 0 0') : (-1, 0),
    fmt('0 1 1' \
        '0   0' \
        '0 0 0') : (-1, 0),

    # two neighbors : on non-opposite orthos
    fmt('0 1 0' \
        '1   0' \
        '0 0 0') : (-1,-1),

    # two neighbors : on non-opposite corners
    fmt('1 0 1' \
        '0   0' \
        '0 0 0') : (-1, 0),

    # two neighbors : corner and opposite ortho
    fmt('1 0 0' \
        '0   1' \
        '0 0 0') : (-1, 0),
    fmt('0 0 1' \
        '1   0' \
        '0 0 0') : (-1, 0),

    # three neighbors : on a line
    fmt('1 1 1' \
        '0   0' \
        '0 0 0') : (-1, 0),

    # three neighbors : like a square
    fmt('1 1 0' \
        '1   0' \
        '0 0 0') : (-1, 0),

    # three neighbors : like a snake
    fmt('1 1 0' \
        '0   1' \
        '0 0 0') : (-1, 0),
    fmt('0 1 1' \
        '1   0' \
        '0 0 0') : (-1, 0),

    # three neighbors : two themselves neighbor, other on non-opposite corner
    fmt('1 0 1' \
        '1   0' \
        '0 0 0') : (-1, 0),
    fmt('1 0 1' \
        '0   1' \
        '0 0 0') : (-1, 0),

    # four neighbors : doing a 'L'
    fmt('1 1 1' \
        '0   1' \
        '0 0 0') : (-1, 0),
    fmt('1 1 1' \
        '1   0' \
        '0 0 0') : (-1, 0),

}

mvts = [
    (-1,-1),
    (-1, 0),
    (-1, 1),
    ( 0, 1),
    ( 1, 1),
    ( 1, 0),
    ( 1,-1),
    ( 0,-1),
]

def rotate0(case):
    return case

def rotate90(case):
    x, mvt = case
    # rotate x
    rx = (x & (1 << 7)) >> 2 | \
         (x & (1 << 6)) >> 3 | \
         (x & (1 << 5)) >> 5 | \
         (x & (1 << 4)) << 2 | \
         (x & (1 << 3)) >> 2 | \
         (x & (1 << 2)) << 5 | \
         (x & (1 << 1)) << 3 | \
         (x & (1 << 0)) << 2
    # rotate the mvt
    rmvt = mvts[(mvts.index(mvt)+2)%len(mvts)]
    return (rx, rmvt)

def rotate180(case):
    x, mvt = case
    # rotate x
    rx = (x & (1 << 7)) >> 7 | \
         (x & (1 << 6)) >> 5 | \
         (x & (1 << 5)) >> 3 | \
         (x & (1 << 4)) >> 1 | \
         (x & (1 << 3)) << 1 | \
         (x & (1 << 2)) << 3 | \
         (x & (1 << 1)) << 5 | \
         (x & (1 << 0)) << 7
    # rotate the mvt
    rmvt = mvts[(mvts.index(mvt)+4)%len(mvts)]
    return (rx, rmvt)

def rotate270(case):
    x, mvt = case
    # rotate x
    rx = (x & (1 << 7)) >> 5 | \
         (x & (1 << 6)) >> 2 | \
         (x & (1 << 5)) << 2 | \
         (x & (1 << 4)) >> 3 | \
         (x & (1 << 3)) << 3 | \
         (x & (1 << 2)) >> 2 | \
         (x & (1 << 1)) << 2 | \
         (x & (1 << 0)) << 5
    # rotate the mvt
    rmvt = mvts[(mvts.index(mvt)-2)%len(mvts)]
    return (rx, rmvt)

neighbors_cases = {}
for case in nosym_neighbors_cases.iteritems():
    for rotate in [rotate0, rotate90, rotate180, rotate270]:
        x, mvt = rotate(case)
        neighbors_cases[x] = mvt

# there are test cases, ie portions of space with connected robots inside
test_cases = {

    'square3' : \
        (fmt('1 1 1' \
             '1 0 1' \
             '1 1 1'), 3, 3),

    'square4' : \
        (fmt('1 1 1 1' \
             '1 0 0 1' \
             '1 0 0 1' \
             '1 1 1 1'), 4, 4),

    'square5' : \
        (fmt('1 1 1 1 1' \
             '1 0 0 0 1' \
             '1 0 0 0 1' \
             '1 0 0 0 1' \
             '1 1 1 1 1'), 5, 5),

    'square6' : \
        (fmt('1 1 1 1 1 1' \
             '1 0 0 0 0 1' \
             '1 0 0 0 0 1' \
             '1 0 0 0 0 1' \
             '1 0 0 0 0 1' \
             '1 1 1 1 1 1'), 6, 6),

    'square7' : \
        (fmt('1 1 1 1 1 1 1' \
             '1 0 0 0 0 0 1' \
             '1 0 0 0 0 0 1' \
             '1 0 0 0 0 0 1' \
             '1 0 0 0 0 0 1' \
             '1 0 0 0 0 0 1' \
             '1 1 1 1 1 1 1'), 7, 7),

    'square8' : \
        (fmt('1 1 1 1 1 1 1 1' \
             '1 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 1' \
             '1 1 1 1 1 1 1 1'), 8, 8),

    'stair3' : \
        (fmt('1 1 1 0 0' \
             '1 0 1 0 0' \
             '1 0 1 1 1' \
             '1 0 0 0 1' \
             '1 1 1 1 1'), 5, 5),

    'stair4' : \
        (fmt('1 1 1 1 0 0 0' \
             '1 0 0 1 0 0 0' \
             '1 0 0 1 0 0 0' \
             '1 0 0 1 1 1 1' \
             '1 0 0 0 0 0 1' \
             '1 0 0 0 0 0 1' \
             '1 1 1 1 1 1 1'), 7, 7),

    'stair5' : \
        (fmt('1 1 1 1 1 0 0 0 0' \
             '1 0 0 0 1 0 0 0 0' \
             '1 0 0 0 1 0 0 0 0' \
             '1 0 0 0 1 0 0 0 0' \
             '1 0 0 0 1 1 1 1 1' \
             '1 0 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 0 1' \
             '1 1 1 1 1 1 1 1 1'), 9, 9),

    'stair5,7' : \
        (fmt('1 1 1 1 1 0 0 0 0 0 0' \
             '1 0 0 0 1 0 0 0 0 0 0' \
             '1 0 0 0 1 0 0 0 0 0 0' \
             '1 0 0 0 1 0 0 0 0 0 0' \
             '1 0 0 0 1 1 1 1 1 1 1' \
             '1 0 0 0 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 0 0 0 1' \
             '1 0 0 0 0 0 0 0 0 0 1' \
             '1 1 1 1 1 1 1 1 1 1 1'), 9, 11),

    'line5' : \
        (fmt('1 1 1 1 1'), 1, 5),

    'line6' : \
        (fmt('1 1 1 1 1 1 1 1 1 1'), 1, 6),

    'bloc2,3' : \
        (fmt('1 1 1' \
             '1 1 1'), 2, 3),

    'bloc2,4' : \
        (fmt('1 1 1 1' \
             '1 1 1 1'), 2, 4),

    'bloc2,5' : \
        (fmt('1 1 1 1 1' \
             '1 1 1 1 1'), 2, 5),

    'bloc3,3' : \
        (fmt('1 1 1' \
             '1 1 1' \
             '1 1 1'), 3, 3),

    'bloc4,4' : \
        (fmt('1 1 1 1' \
             '1 1 1 1' \
             '1 1 1 1' \
             '1 1 1 1'), 4, 4),

    'garden3,7' : \
        (fmt('1 1 1 1 1 1 1' \
             '1 0 0 1 0 0 1' \
             '1 0 1 1 1 0 1' \
             '1 1 1 0 1 1 1' \
             '1 0 1 1 1 0 1' \
             '1 0 0 1 0 0 1' \
             '1 1 1 1 1 1 1'), 7, 7),

    'garden3,9' : \
        (fmt('1 1 1 1 1 1 1 1 1' \
             '1 0 0 0 1 0 0 0 1' \
             '1 0 0 0 1 0 0 0 1' \
             '1 0 0 1 1 1 0 0 1' \
             '1 1 1 1 0 1 1 1 1' \
             '1 0 0 1 1 1 0 0 1' \
             '1 0 0 0 1 0 0 0 1' \
             '1 0 0 0 1 0 0 0 1' \
             '1 1 1 1 1 1 1 1 1'), 9, 9),

    'garden5,9' : \
        (fmt('1 1 1 1 1 1 1 1 1' \
             '1 0 0 0 1 0 0 0 1' \
             '1 0 1 1 1 1 1 0 1' \
             '1 0 1 0 0 0 1 0 1' \
             '1 1 1 0 0 0 1 1 1' \
             '1 0 1 0 0 0 1 0 1' \
             '1 0 1 1 1 1 1 0 1' \
             '1 0 0 0 1 0 0 0 1' \
             '1 1 1 1 1 1 1 1 1'), 9, 9),

    'garden5,11' : \
        (fmt('1 1 1 1 1 1 1 1 1 1 1' \
             '1 0 0 0 0 1 0 0 0 0 1' \
             '1 0 0 0 0 1 0 0 0 0 1' \
             '1 0 0 1 1 1 1 1 0 0 1' \
             '1 0 0 1 0 0 0 1 0 0 1' \
             '1 1 1 1 0 0 0 1 1 1 1' \
             '1 0 0 1 0 0 0 1 0 0 1' \
             '1 0 0 1 1 1 1 1 0 0 1' \
             '1 0 0 0 0 1 0 0 0 0 1' \
             '1 0 0 0 0 1 0 0 0 0 1' \
             '1 1 1 1 1 1 1 1 1 1 1'), 11, 11),

    'diag5,6' : \
        (fmt('1 0 0 0 0 0' \
             '0 1 0 0 0 0' \
             '0 0 1 1 0 0' \
             '0 0 0 0 1 0' \
             '0 0 0 0 0 1'), 5, 6),

    'diag7,8' : \
        (fmt('1 0 0 0 0 0 0 0' \
             '0 1 0 0 0 0 0 0' \
             '0 0 1 0 0 0 0 0' \
             '0 0 0 1 1 0 0 0' \
             '0 0 0 0 0 1 0 0' \
             '0 0 0 0 0 0 1 0' \
             '0 0 0 0 0 0 0 1'), 7, 8),

}
